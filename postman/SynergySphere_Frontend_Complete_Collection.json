{
  "info": {
    "name": "SynergySphere API - Frontend Based Collection (Complete)",
    "description": "Complete Postman collection based on actual API endpoints used in the SynergySphere frontend. Login credentials: adityar42069@gmail.com:12345678",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "synergysphere-frontend-complete",
    "version": {
      "major": 2,
      "minor": 0,
      "patch": 0
    }
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://127.0.0.1:5000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken", 
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "projectId",
      "value": "",
      "type": "string"
    },
    {
      "key": "taskId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "description": "Authentication endpoints used by the frontend",
      "item": [
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('access_token');",
                  "    pm.collectionVariables.set('accessToken', jsonData.access_token);",
                  "    if (jsonData.refresh_token) {",
                  "        pm.collectionVariables.set('refreshToken', jsonData.refresh_token);",
                  "    }",
                  "    if (jsonData.user && jsonData.user.id) {",
                  "        pm.collectionVariables.set('userId', jsonData.user.id);",
                  "    }",
                  "});",
                  "",
                  "pm.test('User data is present', function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"adityar42069@gmail.com\",\n  \"password\": \"12345678\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with existing credentials"
          }
        },
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"full_name\": \"Test User\",\n  \"username\": \"testuser\",\n  \"email\": \"testuser@example.com\",\n  \"password\": \"testpassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register new user - sends OTP to email"
          }
        },
        {
          "name": "Verify OTP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"testuser@example.com\",\n  \"otp\": \"123456\",\n  \"full_name\": \"Test User\",\n  \"username\": \"testuser\",\n  \"password\": \"testpassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-otp",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-otp"]
            },
            "description": "Verify OTP and complete registration"
          }
        },
        {
          "name": "Resend OTP",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"testuser@example.com\",\n  \"username\": \"testuser\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/resend-otp",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "resend-otp"]
            },
            "description": "Resend OTP for email verification"
          }
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{refreshToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Refresh access token using refresh token"
          }
        },
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"adityar42069@gmail.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "forgot-password"]
            },
            "description": "Request password reset email"
          }
        },
        {
          "name": "Verify Reset Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset_token_here\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-reset-token",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-reset-token"]
            },
            "description": "Verify password reset token"
          }
        },
        {
          "name": "Reset Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"reset_token_here\",\n  \"new_password\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/reset-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "reset-password"]
            },
            "description": "Reset password with token"
          }
        },
        {
          "name": "Logout",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            },
            "description": "Logout current user"
          }
        },
        {
          "name": "Update Settings",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"notify_email\": true,\n  \"notify_in_app\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/settings",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "settings"]
            },
            "description": "Update user notification settings"
          }
        },
        {
          "name": "Google Register",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"google_oauth_token_here\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/google-register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "google-register"]
            },
            "description": "Register with Google OAuth"
          }
        },
        {
          "name": "Google Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"google_oauth_token_here\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/google-login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "google-login"]
            },
            "description": "Login with Google OAuth"
          }
        },
        {
          "name": "Get Google Client ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/google/client-id",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "google", "client-id"]
            },
            "description": "Get Google OAuth client ID"
          }
        }
      ]
    },
    {
      "name": "üë§ Profile Management",
      "description": "Profile endpoints used by the frontend",
      "item": [
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/profile",
              "host": ["{{baseUrl}}"],
              "path": ["profile"]
            },
            "description": "Get current user profile information"
          }
        },
        {
          "name": "Update Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"updated_username\",\n  \"about\": \"Updated about section\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/profile",
              "host": ["{{baseUrl}}"],
              "path": ["profile"]
            },
            "description": "Update user profile information"
          }
        },
        {
          "name": "Upload Profile Image",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "profile_image",
                  "type": "file",
                  "src": [],
                  "description": "Profile image file"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/profile/upload-image",
              "host": ["{{baseUrl}}"],
              "path": ["profile", "upload-image"]
            },
            "description": "Upload profile image"
          }
        }
      ]
    },
    {
      "name": "üìÅ Project Management",
      "description": "Project endpoints used by the frontend",
      "item": [
        {
          "name": "Get All Projects",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has projects array', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.projects) {",
                  "        pm.expect(jsonData.projects).to.be.an('array');",
                  "        if (jsonData.projects.length > 0) {",
                  "            pm.collectionVariables.set('projectId', jsonData.projects[0].id);",
                  "        }",
                  "    } else if (Array.isArray(jsonData)) {",
                  "        pm.expect(jsonData).to.be.an('array');",
                  "        if (jsonData.length > 0) {",
                  "            pm.collectionVariables.set('projectId', jsonData[0].id);",
                  "        }",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/projects",
              "host": ["{{baseUrl}}"],
              "path": ["projects"],
              "query": [
                {
                  "key": "include_tasks",
                  "value": "true",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "20",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "0",
                  "disabled": true
                }
              ]
            },
            "description": "Get all projects with optional filters"
          }
        },
        {
          "name": "Get Project by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "{{projectId}}"]
            },
            "description": "Get specific project details"
          }
        },
        {
          "name": "Create Project (JSON)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.project && jsonData.project.id) {",
                  "        pm.collectionVariables.set('projectId', jsonData.project.id);",
                  "    } else if (jsonData.id) {",
                  "        pm.collectionVariables.set('projectId', jsonData.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"A test project created via API\",\n  \"deadline\": \"2024-12-31T23:59:59.000Z\",\n  \"member_emails\": [\"member@example.com\"],\n  \"member_permissions\": {\n    \"member@example.com\": false\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/projects",
              "host": ["{{baseUrl}}"],
              "path": ["projects"]
            },
            "description": "Create new project with JSON data"
          }
        },
        {
          "name": "Create Project (FormData with Image)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.project && jsonData.project.id) {",
                  "        pm.collectionVariables.set('projectId', jsonData.project.id);",
                  "    } else if (jsonData.id) {",
                  "        pm.collectionVariables.set('projectId', jsonData.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "name",
                  "value": "Test Project with Image",
                  "type": "text"
                },
                {
                  "key": "description",
                  "value": "A test project with image upload",
                  "type": "text"
                },
                {
                  "key": "deadline",
                  "value": "2024-12-31T23:59:59.000Z",
                  "type": "text"
                },
                {
                  "key": "member_emails",
                  "value": "[\"member@example.com\"]",
                  "type": "text",
                  "description": "JSON string of member emails"
                },
                {
                  "key": "member_permissions",
                  "value": "{\"member@example.com\": false}",
                  "type": "text",
                  "description": "JSON string of member permissions"
                },
                {
                  "key": "project_image",
                  "type": "file",
                  "src": [],
                  "description": "Project image file"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/projects",
              "host": ["{{baseUrl}}"],
              "path": ["projects"]
            },
            "description": "Create new project with image upload"
          }
        },
        {
          "name": "Update Project",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Project Name\",\n  \"description\": \"Updated project description\",\n  \"deadline\": \"2024-12-31T23:59:59.000Z\",\n  \"status\": \"active\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "{{projectId}}"]
            },
            "description": "Update existing project"
          }
        },
        {
          "name": "Delete Project",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "{{projectId}}"]
            },
            "description": "Delete project"
          }
        },
        {
          "name": "Add Project Member",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"newmember@example.com\",\n  \"isEditor\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/projects/{{projectId}}/members",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "{{projectId}}", "members"]
            },
            "description": "Add member to project"
          }
        },
        {
          "name": "Update Project Member",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"isEditor\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/projects/{{projectId}}/members/1",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "{{projectId}}", "members", "1"]
            },
            "description": "Update project member permissions"
          }
        },
        {
          "name": "Remove Project Member",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/projects/{{projectId}}/members/1",
              "host": ["{{baseUrl}}"],
              "path": ["projects", "{{projectId}}", "members", "1"]
            },
            "description": "Remove member from project"
          }
        },
        {
          "name": "Search Users",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/search?q=test",
              "host": ["{{baseUrl}}"],
              "path": ["users", "search"],
              "query": [
                {
                  "key": "q",
                  "value": "test",
                  "description": "Search query"
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "10",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "0",
                  "disabled": true
                }
              ]
            },
            "description": "Search for users to add to projects"
          }
        }
      ]
    },
    {
      "name": "‚úÖ Task Management",
      "description": "Task endpoints used by the frontend",
      "item": [
        {
          "name": "Get All Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has tasks', function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.tasks && Array.isArray(jsonData.tasks)) {",
                  "        pm.expect(jsonData.tasks).to.be.an('array');",
                  "        if (jsonData.tasks.length > 0) {",
                  "            pm.collectionVariables.set('taskId', jsonData.tasks[0].id);",
                  "        }",
                  "    } else if (Array.isArray(jsonData)) {",
                  "        pm.expect(jsonData).to.be.an('array');",
                  "        if (jsonData.length > 0) {",
                  "            pm.collectionVariables.set('taskId', jsonData[0].id);",
                  "        }",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"],
              "query": [
                {
                  "key": "project_id",
                  "value": "{{projectId}}",
                  "disabled": true
                },
                {
                  "key": "status",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "assignee",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "owner",
                  "value": "",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "20",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "0",
                  "disabled": true
                }
              ]
            },
            "description": "Get all tasks with optional filters"
          }
        },
        {
          "name": "Get Task by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{taskId}}"]
            },
            "description": "Get specific task details"
          }
        },
        {
          "name": "Create Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.task && jsonData.task.id) {",
                  "        pm.collectionVariables.set('taskId', jsonData.task.id);",
                  "    } else if (jsonData.id) {",
                  "        pm.collectionVariables.set('taskId', jsonData.id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"project_id\": {{projectId}},\n  \"title\": \"Test Task\",\n  \"description\": \"A test task created via API\",\n  \"due_date\": \"2024-12-31T23:59:59.000Z\",\n  \"status\": \"todo\",\n  \"assigned_to\": {{userId}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["tasks"]
            },
            "description": "Create new task"
          }
        },
        {
          "name": "Update Task",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"project_id\": {{projectId}},\n  \"title\": \"Updated Task Title\",\n  \"description\": \"Updated task description\",\n  \"due_date\": \"2024-12-31T23:59:59.000Z\",\n  \"status\": \"in_progress\",\n  \"assigned_to\": {{userId}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{taskId}}"]
            },
            "description": "Update existing task"
          }
        },
        {
          "name": "Update Task Status Only",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"completed\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/{{taskId}}/status",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{taskId}}", "status"]
            },
            "description": "Update only task status"
          }
        },
        {
          "name": "Delete Task",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"project_id\": {{projectId}}\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["tasks", "{{taskId}}"]
            },
            "description": "Delete task"
          }
        }
      ]
    },
    {
      "name": "üìä Dashboard",
      "description": "Dashboard endpoints used by the frontend",
      "item": [
        {
          "name": "Get Dashboard Overview",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/dashboard/overview",
              "host": ["{{baseUrl}}"],
              "path": ["dashboard", "overview"]
            },
            "description": "Get dashboard overview data"
          }
        },
        {
          "name": "Get Dashboard Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/dashboard/stats",
              "host": ["{{baseUrl}}"],
              "path": ["dashboard", "stats"]
            },
            "description": "Get dashboard statistics"
          }
        }
      ]
    }
  ]
} 